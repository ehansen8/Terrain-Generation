#pragma kernel SimplexGrid
#pragma kernel SimulateErosion
  
//
// Description : Array and textureless GLSL 2D/3D/4D simplex 
//               noise functions.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : stegu
//     Lastmod : 20201014 (stegu)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
//               https://github.com/stegu/webgl-noise
// 

float3 mod289(float3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

float4 mod289(float4 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

float4 permute(float4 x) {
     return mod289(((x*34.0)+10.0)*x);
}

float4 taylorInvSqrt(float4 r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(float3 v)
{ 
    const float2  C = float2(1.0/6.0, 1.0/3.0) ;
    const float4  D = float4(0.0, 0.5, 1.0, 2.0);

    // First corner
    float3 i  = floor(v + dot(v, C.yyy) );
    float3 x0 =   v - i + dot(i, C.xxx) ;

    // Other corners
    float3 g = step(x0.yzx, x0.xyz);
    float3 l = 1.0 - g;
    float3 i1 = min( g.xyz, l.zxy );
    float3 i2 = max( g.xyz, l.zxy );

    //   x0 = x0 - 0.0 + 0.0 * C.xxx;
    //   x1 = x0 - i1  + 1.0 * C.xxx;
    //   x2 = x0 - i2  + 2.0 * C.xxx;
    //   x3 = x0 - 1.0 + 3.0 * C.xxx;
    float3 x1 = x0 - i1 + C.xxx;
    float3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
    float3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

    // Permutations
    i = mod289(i); 
    float4 p = permute( permute( permute( 
                i.z + float4(0.0, i1.z, i2.z, 1.0 ))
            + i.y + float4(0.0, i1.y, i2.y, 1.0 )) 
            + i.x + float4(0.0, i1.x, i2.x, 1.0 ));

    // Gradients: 7x7 points over a square, mapped onto an octahedron.
    // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
    float n_ = 0.142857142857; // 1.0/7.0
    float3  ns = n_ * D.wyz - D.xzx;

    float4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

    float4 x_ = floor(j * ns.z);
    float4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

    float4 x = x_ *ns.x + ns.yyyy;
    float4 y = y_ *ns.x + ns.yyyy;
    float4 h = 1.0 - abs(x) - abs(y);

    float4 b0 = float4( x.xy, y.xy );
    float4 b1 = float4( x.zw, y.zw );

    //float4 s0 = float4(lessThan(b0,0.0))*2.0 - 1.0;
    //float4 s1 = float4(lessThan(b1,0.0))*2.0 - 1.0;
    float4 s0 = floor(b0)*2.0 + 1.0;
    float4 s1 = floor(b1)*2.0 + 1.0;
    float4 sh = -step(h, float4(0,0,0,0));

    float4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
    float4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

    float3 p0 = float3(a0.xy,h.x);
    float3 p1 = float3(a0.zw,h.y);
    float3 p2 = float3(a1.xy,h.z);
    float3 p3 = float3(a1.zw,h.w);

//Normalise gradients
    float4 norm = taylorInvSqrt(float4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
    p0 *= norm.x;
    p1 *= norm.y;
    p2 *= norm.z;
    p3 *= norm.w;

// Mix final noise value
    float4 m = max(0.5 - float4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
    m = m * m;
    return 105.0 * dot( m*m, float4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) );
}
// ABOVE IS SIMPLEX NOISE3D Implementation

RWStructuredBuffer<float> gridBuffer;
int gridRes;
float3 start;
float3 increments;

float freq;
int octaves;
float lacunarity;
float persistance;
float3 offset;
float planet_radius;
float asymptote;
float curvature;

// Convert indices to actual distances
float3 ScalePosition(float3 indices)
{
    return start + (increments*indices);
}

int GetGridIndex(int x, int y, int z)
{
    return x + (y * gridRes) + (z * gridRes * gridRes);
}

// Create Fractal Noise
float IterateNoise(float3 pos)
{
    float value = 0;
    float tempFreq = freq;
    float tempMult = 1;
    float3 off = float3(offset.x,offset.y,offset.z);

    for (int i = 0; i < octaves; i++)
    {   

        // First pass freq is normal and mult is 1
        // 
        value += snoise(((off+pos)*tempFreq)) * tempMult;
        tempFreq *= lacunarity;
        tempMult *= persistance;
    }

    //Radius smoothing function 
    //(Logistic Function: asy is horizontal asymptote, k is curvature, midpoint is where value = asy/2 );
    float asy = asymptote;
    float k = curvature;
    float midpoint = planet_radius;
    float modifier = (asy / (1+exp(-k*(length(pos)-midpoint))))-0.75;

    // plate region is 
    /*if (length(pos) > planet_radius)
        return -1;
    else if (length(pos) < planet_radius * 0.85)
        return 1;*/

    //return pow(-abs(value)+1,2);
    value = clamp(value, -1, 1);
    return clamp(value-modifier,-1,1);
}


struct HydroCell
{
    float2x4 p;
};

float SimpleSphere(float3 pos)
{   //Sphere
    return planet_radius - length(pos);
}

//multiples of 64 for NVIDIA
[numthreads(8,8,8)]
void SimplexGrid (int3 id : SV_DispatchThreadID)
{
    if (id.x >= gridRes)
        return;
    if (id.y >= gridRes)
        return;
    if (id.z >= gridRes)
        return;

    int GI = GetGridIndex(id.x,id.y,id.z);
    float3 pos = ScalePosition(id);

    gridBuffer[GI] = IterateNoise(pos);
}

float3 N(HydroCell cell, float3 pos)
{
    int3 voxel = int3(pos);
    float3 frac = pos - voxel;

    //Lerp values between x's
    float4 ix = lerp(cell.p._m00_m01_m10_m11, cell.p._m03_m02_m13_m12, frac.x);
    // z=0: x.03, y.12 | z=1: z.47, w.56

    //Lerp values between y's
    float4 iy = lerp(cell.p._m00_m01_m02_m03, cell.p._m10_m11_m12_m13, frac.y);
    // x=0: x.04, y.15 | x=1: z.26, w.37

    float2 ixy = lerp(ix.xy, ix.zw, frac.y);
    float2 ixz = lerp(ix.xz, ix.yw, frac.z);
    float2 iyz = lerp(iy.xw, iy.yz, frac.z);
    float dx = iyz.x - iyz.y;
    float dy = ixz.x - ixz.y;
    float dz = ixy.x - ixy.y;

    return -1*normalize(float3(dx, dy, dz));
}

//Can add in speed and rate and other features as well
struct Material
{
    float3 pos;
    float3 dir;     // unit vector
    float mass;
    float3 vel;
};

int3 GetClosestCell(float3 pos)
{
    return int3(pos - start) / increments.x;
}





//Can add in speed and rate and other features as well
float P_min_slope;      // minimum value for h_diff, prevents capacity from getting to close to -
float P_capacity;
float P_deposition;     //[0-1], percentage of excess sediment dropped by particle
float P_erosion;        //[0-1], how much free capacity of particle is filled with sediment when erosion happens
                        // low values lead to longer paths, but too low and not much erosion happens
float P_gravity;
float P_min_water;
float P_inertia;        //[0-1], 1 means the direction always equals the normal , 0 means dir never changes
float P_evaporation;    //[0-1], Percentage of water that evaporates each time step
float P_radius;         // The radius in which sediment is taken from the rock layer
float K_normal;
float K_tangent;
float K_min_deposition;
float alpha_1;
float alpha_2;
float sigma;        //contribution of sediment to weight
float K_fric;
float K_air;
float K_kill_speed;


struct Water
{
    float3 pos;
    float3 vel;     // normalize for movment updates
    float water;    // mass of water that the particle contains
    float sediment; // mass of sediment that particle contains
};

float3 G(float3 pos)
{
    return normalize((float3(gridRes-1,gridRes-1,gridRes-1) / 2) - pos);   //(gridRes-1)/2 = 0,0,0 in grid coordinates
}

HydroCell GetCell(float3 id)
{
    HydroCell cell;
    cell.p[0][0] = gridBuffer[GetGridIndex(id.x, id.y, id.z)];
    cell.p[0][1] = gridBuffer[GetGridIndex(id.x, id.y, id.z + 1)];
    cell.p[0][2] = gridBuffer[GetGridIndex(id.x + 1, id.y, id.z + 1)];
    cell.p[0][3] = gridBuffer[GetGridIndex(id.x + 1, id.y, id.z)];
    cell.p[1][0] = gridBuffer[GetGridIndex(id.x, id.y + 1, id.z)];
    cell.p[1][1] = gridBuffer[GetGridIndex(id.x, id.y + 1, id.z + 1)];
    cell.p[1][2] = gridBuffer[GetGridIndex(id.x + 1, id.y + 1, id.z + 1)];
    cell.p[1][3] = gridBuffer[GetGridIndex(id.x + 1, id.y + 1, id.z)];

    return cell;
}

void UpdateNeighbors(float3 id, float delta_s)
{
    //positive delta_s means the particle gained mass -> thus the neighbors should lose mass
    gridBuffer[GetGridIndex(id.x, id.y, id.z)] -= delta_s;
    gridBuffer[GetGridIndex(id.x, id.y, id.z + 1)] -= delta_s;
    gridBuffer[GetGridIndex(id.x + 1, id.y, id.z + 1)] -= delta_s;
    gridBuffer[GetGridIndex(id.x + 1, id.y, id.z)] -= delta_s;
    gridBuffer[GetGridIndex(id.x, id.y + 1, id.z)] -= delta_s;
    gridBuffer[GetGridIndex(id.x, id.y + 1, id.z + 1)] -= delta_s;
    gridBuffer[GetGridIndex(id.x + 1, id.y + 1, id.z + 1)] -= delta_s;
    gridBuffer[GetGridIndex(id.x + 1, id.y + 1, id.z)] -= delta_s;
}

float L(HydroCell cell, float3 pos)
{ 
    int3 voxel = int3(pos);
    float3 frac = pos - voxel;

    float4 ix = lerp(cell.p._m00_m01_m10_m11, cell.p._m03_m02_m13_m12, frac.x);
    // z=0: x.03, y.12, | z=1: z.47, w.56

    float2 ixz = lerp(ix.xz, ix.yw, frac.z);
    // y=0: x.0312, | y=1: y.4756

    return lerp(ixz.x, ixz.y, frac.y);
}



// ^^^ RWStructuredBuffer<float4> grid;
RWStructuredBuffer<Water> waterBuffer;


[numthreads(1024, 1, 1)]
void SimulateErosion(int3 Tid : SV_DispatchThreadID)
{
    Water p = waterBuffer[Tid.x];
    float step_size = 1;
    float step_dist = step_size * increments.x;

    while (p.water > P_min_water)
    {
        float delta_t = step_dist / length(p.vel);
        float mass = (1 + sigma * p.sediment);/*

        if (length(p.vel) < K_kill_speed)
            return;*/

            // ---------------------------
            // Main loop starts here

        HydroCell cell = GetCell(int3(p.pos));

        float3 n = -1 * N(cell, p.pos);
        float3 v_normal = n * dot(p.vel, n);
        float3 v_tangent = p.vel - v_normal;

        int collided = 0;
        // If collision -> update position with normal, but keep vel the same
        [unroll(2)] while (L(cell, p.pos) >= 0)
        {
            p.pos += n * 0.5;    //can adjust the 0.f weight later
            cell = GetCell(int3(p.pos));
            collided = 1;
        }


        // If it collides -> loses all normal momentum
        p.vel = lerp(p.vel, v_tangent, collided);

        float velocity = length(p.vel);
        float3 v_hat = p.vel / velocity;
        // Only Update if collison

        // Normal force 
        float3 g = G(p.pos);
        float Fn = dot(mass * g * P_gravity, n);
        float3 F_f = K_fric * abs(Fn) * -v_hat;
        float3 v_friction = (delta_t * F_f / mass);

        float3 F_air = (K_air * pow(velocity, 2)) * -v_hat;

        float3 F_g = g * P_gravity * mass;

        //p.tangent = delta_t*F_air/mass;
        //p.normal = lerp(0,v_friction,p.collided);

        //v_friction is only present on collision
        p.vel += lerp(0, v_friction, collided);

        //v_air is always present
        p.vel += delta_t * (F_air + F_g) / mass;

        //Only update after collison or when no collision
        float3 pos_new = p.pos + normalize(p.vel) * step_size;

        //c = carry capacity of the water particle
        float c = P_capacity * length(p.vel) * p.water;
        float delta_s = 0;
        // Have extra capacity -> disolve some material 
        if (c > p.sediment)
        {
            delta_s = (K_normal * length(v_normal) + K_tangent * length(v_tangent)) * (c - p.sediment) * P_erosion;
            // aim for K_normal/K_tangent == 1
        }

        // Have excess sediment -> deposit some material
        else
        {
            delta_s = -min(p.sediment, smoothstep(alpha_1, alpha_2, dot(n, -g)) * max(p.sediment - c, K_min_deposition) * P_deposition);
        }

        ////////// ONLY UPDATE ON COLLISIONS
        if (collided == 0)
            delta_s = 0;

        UpdateNeighbors(p.pos, delta_s);

        p.water *= (1 - P_evaporation); // constant evaporation rate
        p.sediment += delta_s;
        p.pos = pos_new;        //update after UpdateNeighbors at old position
    }
    waterBuffer[Tid.x] = p;
}








