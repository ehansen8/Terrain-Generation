#pragma kernel CalculateNormals
#pragma kernel CalculateVertices
#pragma kernel CalculateTriangles

#include "./Utilites/MarchingCubesLookupTables.compute"

struct Vertex
{
    float3 position;
    float3 normal;
    int idx;
};

struct Edges
{
    Vertex vertices[3];
};

struct Triangle
{
    int vertices[3];
};

struct Cell
{
    int corners[8];
};



const static float iso = 0;
int chunk_grid_res;
int oversize_chunk_grid_res;
float3 increment;
bool interpolate;
float3 gridPosOffset;

RWStructuredBuffer<int> vCount;
RWStructuredBuffer<Vertex> ordered_vertex_buffer;
StructuredBuffer<float> osChunkBuffer;  //oversized by 1 in all directions from chunkBuffer
RWStructuredBuffer<float> chunkBuffer;
RWStructuredBuffer<float3> normalBuffer;    // Output:[1], Input:[2]
RWStructuredBuffer<Edges> vertexBuffer;     // Output:[2], Input:[3]
AppendStructuredBuffer<Triangle> triBuffer; // Output:[3]

int GetGridIndex(int x, int y, int z, int res)
{
    return x + (y * res) + (z * res * res);
}

int GetGridIndex(int3 pos, int res)
{
    return pos.x + (pos.y * res) + (pos.z * res * res);
}

float3 ScalePosition(float3 indices)
{
    //without gridPosOffset, the chunks all start in the same quadrant
    return gridPosOffset + (increment * indices);
}

Vertex VertexInterp(int3 p0_idx, int3 p1_idx, int3 n0_idx, int3 n1_idx)
{
    float p0 = chunkBuffer[GetGridIndex(p0_idx, chunk_grid_res)];
    float p1 = chunkBuffer[GetGridIndex(p1_idx, chunk_grid_res)];
    float3 n0 = normalBuffer[GetGridIndex(n0_idx, chunk_grid_res)];
    float3 n1 = normalBuffer[GetGridIndex(n1_idx, chunk_grid_res)];

    float mu = 0.5;

    if (interpolate)
        mu = (iso - p0) / (p1 - p0);
    
    Vertex v;
    v.position = ScalePosition(lerp(p0_idx, p1_idx, mu));
    v.normal = normalize(lerp(n0, n1, mu));
    v.idx = -1;

    return v;
}

//This is reading from an oversize chunkbuffer
float3 N(int3 pos)
{
    float2 ix;
    float2 iy;
    float2 iz;
    ix.x = osChunkBuffer[GetGridIndex(pos + int3(1, 0, 0), oversize_chunk_grid_res)];
    ix.y = osChunkBuffer[GetGridIndex(pos + int3(-1, 0, 0), oversize_chunk_grid_res)];

    iy.x = osChunkBuffer[GetGridIndex(pos + int3(0, 1, 0), oversize_chunk_grid_res)];
    iy.y = osChunkBuffer[GetGridIndex(pos + int3(0, -1, 0), oversize_chunk_grid_res)];

    iz.x = osChunkBuffer[GetGridIndex(pos + int3(0, 0, 1), oversize_chunk_grid_res)];
    iz.y = osChunkBuffer[GetGridIndex(pos + int3(0, 0, -1), oversize_chunk_grid_res)];

    return -1 * normalize(float3(ix.x-ix.y, iy.x-iy.y, iz.x-iz.y));
}

int CalcCubeIndex(Cell cell)
{
    int cubeIndex = 0;
    [loop]for (int i = 0; i < 8; i++)
    {
        // condition will eval to 0 or 1, 0 has no affect, 1 will index at the appropriate location;
        cubeIndex |= (chunkBuffer[cell.corners[i]] > iso) << i;
    }

    return cubeIndex;
}

// returns vertex index;
int AtomicAppendVertex(int edge_idx, int edge_dir )
{
    // Check lock
    int prev_idx = -1;
    [loop] while (prev_idx <= -1)
    {
        InterlockedCompareExchange(vertexBuffer[edge_idx].vertices[edge_dir].idx, -1, -2, prev_idx);
        
        if (prev_idx > -1)  // Vertex has already been placed
            return prev_idx;
        else if (prev_idx == -2) // Vertex has a lock on it
            continue;
        else
        {
            //Case where prev_idx was -1, means we have lock
            InterlockedAdd(vCount[0], 1, prev_idx);
            Vertex v = vertexBuffer[edge_idx].vertices[edge_dir];
            v.idx = prev_idx;
            vertexBuffer[edge_idx].vertices[edge_dir] = v;
            ordered_vertex_buffer[prev_idx] = v;
        }
    }
    return prev_idx;
}

void CalcTriangles(int cubeIndex, int3 chunk_id)
{
    [loop] for (int i = 0; i < 16; i+=3)
    {
        int v[3];
        for (int k = 0; k < 3; k++)
        {
            int edgeIdx = triTable[cubeIndex][i+k];
            if (edgeIdx == -1) return;

            // edgeIdx is 0 -> 11
            int4 localIdxs = edgeTable[edgeIdx];
            int3 chunkIdxs = chunk_id + localIdxs.xyz;
            int vertexBufferIdx = GetGridIndex(chunkIdxs, chunk_grid_res);
            //Gets the edges of that point, then the edge (vertex) in direction w
            v[k] = AtomicAppendVertex(vertexBufferIdx, localIdxs.w);
        }
            
        Triangle t;
        t.vertices[0] = v[0];
        t.vertices[1] = v[1];
        t.vertices[2] = v[2];
        triBuffer.Append(t);

    }
}

// TODO: This requires chunk -1 => may need to change chunk kernel slightly
[numthreads(8, 8, 8)]
void CalculateNormals(int3 id : SV_DispatchThreadID)
{
    if (id.x >= chunk_grid_res)
        return;
    if (id.y >= chunk_grid_res)
        return;
    if (id.z >= chunk_grid_res)
        return;


    // This stays the same
    int GI = GetGridIndex(id, chunk_grid_res);
    
    //This normalBuffer is the correct size
    //add (1,1,1) to map normal buffer ID -> oversize chunk ID
    int3 osID = id+int3(1,1,1);
    normalBuffer[GI] = N(osID);
    chunkBuffer[GI] = osChunkBuffer[GetGridIndex(osID, oversize_chunk_grid_res)];
}

[numthreads(8, 8, 8)]
void CalculateVertices(int3 id : SV_DispatchThreadID)
{
    if (id.x >= chunk_grid_res)
        return;
    if (id.y >= chunk_grid_res)
        return;
    if (id.z >= chunk_grid_res)
        return;
    int GI = GetGridIndex(id, chunk_grid_res);

    Edges edges;
    edges.vertices[0] = VertexInterp(id, id + int3(1, 0, 0), id, id + int3(1, 0, 0));
    edges.vertices[1] = VertexInterp(id, id + int3(0, 1, 0), id, id + int3(0, 1, 0));
    edges.vertices[2] = VertexInterp(id, id + int3(0, 0, 1), id, id + int3(0, 0, 1));

    vertexBuffer[GI] = edges;
}

[numthreads(8,8,8)]
void CalculateTriangles(int3 id : SV_DispatchThreadID)
{
    Cell cell;
    cell.corners[0] = GetGridIndex(id.x,   id.y,   id.z, chunk_grid_res);
    cell.corners[1] = GetGridIndex(id.x,   id.y,   id.z+1, chunk_grid_res);
    cell.corners[2] = GetGridIndex(id.x+1, id.y,   id.z+1, chunk_grid_res);
    cell.corners[3] = GetGridIndex(id.x+1, id.y,   id.z, chunk_grid_res);
    cell.corners[4] = GetGridIndex(id.x,   id.y+1, id.z, chunk_grid_res);
    cell.corners[5] = GetGridIndex(id.x,   id.y+1, id.z+1, chunk_grid_res);
    cell.corners[6] = GetGridIndex(id.x+1, id.y+1, id.z+1, chunk_grid_res);
    cell.corners[7] = GetGridIndex(id.x+1, id.y+1, id.z, chunk_grid_res);
    
    
    int cubeIndex = CalcCubeIndex(cell);  
    CalcTriangles(cubeIndex, id);
};





