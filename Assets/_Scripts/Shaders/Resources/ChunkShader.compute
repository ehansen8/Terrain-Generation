#pragma kernel ConvertGridToChunk
#pragma kernel IncreaseResolution
#pragma kernel AddNoise

float3 mod289(float3 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

float4 mod289(float4 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

float4 permute(float4 x) {
    return mod289(((x * 34.0) + 10.0) * x);
}

float4 taylorInvSqrt(float4 r)
{
    return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(float3 v)
{
    const float2  C = float2(1.0 / 6.0, 1.0 / 3.0);
    const float4  D = float4(0.0, 0.5, 1.0, 2.0);

    // First corner
    float3 i = floor(v + dot(v, C.yyy));
    float3 x0 = v - i + dot(i, C.xxx);

    // Other corners
    float3 g = step(x0.yzx, x0.xyz);
    float3 l = 1.0 - g;
    float3 i1 = min(g.xyz, l.zxy);
    float3 i2 = max(g.xyz, l.zxy);

    //   x0 = x0 - 0.0 + 0.0 * C.xxx;
    //   x1 = x0 - i1  + 1.0 * C.xxx;
    //   x2 = x0 - i2  + 2.0 * C.xxx;
    //   x3 = x0 - 1.0 + 3.0 * C.xxx;
    float3 x1 = x0 - i1 + C.xxx;
    float3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
    float3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

    // Permutations
    i = mod289(i);
    float4 p = permute(permute(permute(
        i.z + float4(0.0, i1.z, i2.z, 1.0))
        + i.y + float4(0.0, i1.y, i2.y, 1.0))
        + i.x + float4(0.0, i1.x, i2.x, 1.0));

    // Gradients: 7x7 points over a square, mapped onto an octahedron.
    // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
    float n_ = 0.142857142857; // 1.0/7.0
    float3  ns = n_ * D.wyz - D.xzx;

    float4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

    float4 x_ = floor(j * ns.z);
    float4 y_ = floor(j - 7.0 * x_);    // mod(j,N)

    float4 x = x_ * ns.x + ns.yyyy;
    float4 y = y_ * ns.x + ns.yyyy;
    float4 h = 1.0 - abs(x) - abs(y);

    float4 b0 = float4(x.xy, y.xy);
    float4 b1 = float4(x.zw, y.zw);

    //float4 s0 = float4(lessThan(b0,0.0))*2.0 - 1.0;
    //float4 s1 = float4(lessThan(b1,0.0))*2.0 - 1.0;
    float4 s0 = floor(b0) * 2.0 + 1.0;
    float4 s1 = floor(b1) * 2.0 + 1.0;
    float4 sh = -step(h, float4(0, 0, 0, 0));

    float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
    float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;

    float3 p0 = float3(a0.xy, h.x);
    float3 p1 = float3(a0.zw, h.y);
    float3 p2 = float3(a1.xy, h.z);
    float3 p3 = float3(a1.zw, h.w);

    //Normalise gradients
    float4 norm = taylorInvSqrt(float4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));
    p0 *= norm.x;
    p1 *= norm.y;
    p2 *= norm.z;
    p3 *= norm.w;

    // Mix final noise value
    float4 m = max(0.5 - float4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), 0.0);
    m = m * m;
    return 105.0 * dot(m * m, float4(dot(p0, x0), dot(p1, x1), dot(p2, x2), dot(p3, x3)));
}
// ABOVE IS SIMPLEX NOISE3D Implementation


// Parameters
StructuredBuffer<float> gridBuffer;
StructuredBuffer<float> oldChunkBuffer;
RWStructuredBuffer<float> newChunkBuffer;

int gridRes;
int initial_res;
int initial_grid_res;
int target_grid_res;
int3 grid_offset;
float3 pos_offset;
float3 start;
float3 increments;

int GetGridIndex(int3 idx, int res)
{
    return idx.x + (idx.y * res) + (idx.z * res * res);
}

///
/// Converts the grid to a chunk.
/// Needs to sample +1 grid point on all edges.
/// Overall resolution is +2 in each dimension
///
[numthreads(8, 8, 8)]
void ConvertGridToChunk(int3 id : SV_DispatchThreadID)
{
    //Last index should equal initial_res +2
    if ((id.x >= target_grid_res+2) || (id.y >= target_grid_res+2) || (id.z >= target_grid_res+2))
        return;
    
    //Maps chunk space to grid space
    int3 grid_id = id + grid_offset - int3(1,1,1);

    newChunkBuffer[GetGridIndex(id, target_grid_res+2)] = gridBuffer[GetGridIndex(grid_id, gridRes)];
}

struct Cell
{
    float2x4 p;
};

Cell GetCell(int3 id)
{
    Cell cell;
    cell.p[0][0] = oldChunkBuffer[GetGridIndex(id + int3(0, 0, 0), initial_grid_res)];
    cell.p[0][1] = oldChunkBuffer[GetGridIndex(id + int3(0, 0, 1), initial_grid_res)];
    cell.p[0][2] = oldChunkBuffer[GetGridIndex(id + int3(1, 0, 1), initial_grid_res)];
    cell.p[0][3] = oldChunkBuffer[GetGridIndex(id + int3(1, 0, 0), initial_grid_res)];
    cell.p[1][0] = oldChunkBuffer[GetGridIndex(id + int3(0, 1, 0), initial_grid_res)];
    cell.p[1][1] = oldChunkBuffer[GetGridIndex(id + int3(0, 1, 1), initial_grid_res)];
    cell.p[1][2] = oldChunkBuffer[GetGridIndex(id + int3(1, 1, 1), initial_grid_res)];
    cell.p[1][3] = oldChunkBuffer[GetGridIndex(id + int3(1, 1, 0), initial_grid_res)];

    return cell;
}

float L(Cell cell, float3 pos)
{

    float4 ix = lerp(cell.p._m00_m01_m10_m11, cell.p._m03_m02_m13_m12, pos.x);
    // z=0: x.03, y.12, | z=1: z.47, w.56

    float2 ixz = lerp(ix.xz, ix.yw, pos.z);
    // y=0: x.0312, | y=1: y.4756

    return lerp(ixz.x, ixz.y, pos.y);
}

void SetChunkBuffer(int3 chunk_id, float3 dir, Cell cell)
{
    float phi = L(cell, dir / 2);
    newChunkBuffer[GetGridIndex(chunk_id + dir, target_grid_res)] = phi;
}

//Takes in an oversize buffer multiplies, then discards the 0 and initial_res values
[numthreads(8,8,8)]
void IncreaseResolution (int3 id : SV_DispatchThreadID)
{
    int3 chunk_id = (id * 2) - int3(1,1,1);

    if((id.x >= initial_res) || (id.y >= initial_res) || (id.z >= initial_res))
        return;

    int3 bools;
    bools.x = id.x > 0;
    bools.y = id.y > 0;
    bools.z = id.z > 0;

    Cell cell = GetCell(id);


    if(all(int3(0, 0, 0)|| bools))
            newChunkBuffer[GetGridIndex(chunk_id, target_grid_res)] = cell.p[0][0];

    if (all(int3(1, 0, 0) || bools))
        SetChunkBuffer(chunk_id, int3(1, 0, 0), cell);

    if (all(int3(0, 1, 0) || bools))
        SetChunkBuffer(chunk_id, int3(0, 1, 0), cell);

    if (all(int3(0, 0, 1) || bools))
        SetChunkBuffer(chunk_id, int3(0, 0, 1), cell);

    if (all(int3(1, 1, 0) || bools))
        SetChunkBuffer(chunk_id, int3(1, 1, 0), cell);

    if (all(int3(1, 0, 1) || bools))
        SetChunkBuffer(chunk_id, int3(1, 0, 1), cell);

    if (all(int3(0, 1, 1) || bools))
        SetChunkBuffer(chunk_id, int3(0, 1, 1), cell);

    if (all(int3(1, 1, 1) || bools))
        SetChunkBuffer(chunk_id, int3(1, 1, 1), cell);
}

float3 ScalePosition(float3 indices)
{
    // GlobalStart + ChunkStart + Position within Chunk
    return pos_offset + (increments * indices);
}

float freq;
int octaves;
float lacunarity;
float persistance;
float3 offset;
float planet_radius;
float asymptote;
float curvature;
float mod_offset;
float tempMult;
float clampRange;

float IterateNoise(float3 pos)
{
    float value = 0;
    float tempFreq = freq;
    float3 off = float3(offset.x, offset.y, offset.z);

    for (int i = 0; i < octaves; i++)
    {

        // First pass freq is normal and mult is 1
        // 
        value += snoise(((off + pos) * tempFreq)) * tempMult;
        tempFreq *= lacunarity;
        tempMult *= persistance;
    }

    //Radius smoothing function 
    //(Logistic Function: asy is horizontal asymptote, k is curvature, midpoint is where value = asy/2 );
    float asy = asymptote;
    float k = curvature;
    float midpoint = planet_radius;
    float modifier = (asy / (1 + exp(-k * (length(pos) - midpoint)))) - mod_offset;
    
    // plate region is 
    /*if (length(pos) > planet_radius)
        return -1;
    else if (length(pos) < planet_radius * 0.85)
        return 1;*/

        //return pow(-abs(value)+1,2);
    value = clamp(value, -1, 1);
    return clamp(value - modifier, -clampRange, clampRange);
}

[numthreads(8, 8, 8)]
void AddNoise(int3 id : SV_DispatchThreadID)
{
    if ((id.x >= target_grid_res) || (id.y >= target_grid_res) || (id.z >= target_grid_res))
        return;

    int idx = GetGridIndex(id, target_grid_res);
    float3 pos = ScalePosition(id);
    newChunkBuffer[idx] += IterateNoise(pos);
}

