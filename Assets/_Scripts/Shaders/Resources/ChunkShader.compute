#pragma kernel ConvertGridToChunk
#pragma kernel IncreaseResolution
#pragma kernel AddNoise

#include "./Utilites/Noise.compute"


// Parameters
StructuredBuffer<float> gridBuffer;
StructuredBuffer<float> oldChunkBuffer;
RWStructuredBuffer<float> newChunkBuffer;

int gridRes;
int initial_res;
int initial_grid_res;
int target_grid_res;
int3 grid_offset;
float3 pos_offset;
float3 start;
float3 increments;

int GetGridIndex(int3 idx, int res)
{
    return idx.x + (idx.y * res) + (idx.z * res * res);
}

///
/// Converts the grid to a chunk.
/// Needs to sample +1 grid point on all edges.
/// Overall resolution is +2 in each dimension
///
[numthreads(8, 8, 8)]
void ConvertGridToChunk(int3 id : SV_DispatchThreadID)
{
    //Last index should equal initial_res +2
    if ((id.x >= target_grid_res+2) || (id.y >= target_grid_res+2) || (id.z >= target_grid_res+2))
        return;
    
    //Maps chunk space to grid space
    int3 grid_id = id + grid_offset - int3(1,1,1);

    newChunkBuffer[GetGridIndex(id, target_grid_res+2)] = gridBuffer[GetGridIndex(grid_id, gridRes)];
}

struct Cell
{
    float2x4 p;
};

Cell GetCell(int3 id)
{
    Cell cell;
    cell.p[0][0] = oldChunkBuffer[GetGridIndex(id + int3(0, 0, 0), initial_grid_res)];
    cell.p[0][1] = oldChunkBuffer[GetGridIndex(id + int3(0, 0, 1), initial_grid_res)];
    cell.p[0][2] = oldChunkBuffer[GetGridIndex(id + int3(1, 0, 1), initial_grid_res)];
    cell.p[0][3] = oldChunkBuffer[GetGridIndex(id + int3(1, 0, 0), initial_grid_res)];
    cell.p[1][0] = oldChunkBuffer[GetGridIndex(id + int3(0, 1, 0), initial_grid_res)];
    cell.p[1][1] = oldChunkBuffer[GetGridIndex(id + int3(0, 1, 1), initial_grid_res)];
    cell.p[1][2] = oldChunkBuffer[GetGridIndex(id + int3(1, 1, 1), initial_grid_res)];
    cell.p[1][3] = oldChunkBuffer[GetGridIndex(id + int3(1, 1, 0), initial_grid_res)];

    return cell;
}

float L(Cell cell, float3 pos)
{

    float4 ix = lerp(cell.p._m00_m01_m10_m11, cell.p._m03_m02_m13_m12, pos.x);
    // z=0: x.03, y.12, | z=1: z.47, w.56

    float2 ixz = lerp(ix.xz, ix.yw, pos.z);
    // y=0: x.0312, | y=1: y.4756

    return lerp(ixz.x, ixz.y, pos.y);
}

void SetChunkBuffer(int3 chunk_id, float3 dir, Cell cell)
{
    float phi = L(cell, dir / 2);
    newChunkBuffer[GetGridIndex(chunk_id + dir, target_grid_res)] = phi;
}

//Takes in an oversize buffer multiplies, then discards the 0 and initial_res values
[numthreads(8,8,8)]
void IncreaseResolution (int3 id : SV_DispatchThreadID)
{
    int3 chunk_id = (id * 2) - int3(1,1,1);

    if((id.x >= initial_res) || (id.y >= initial_res) || (id.z >= initial_res))
        return;

    int3 bools;
    bools.x = id.x > 0;
    bools.y = id.y > 0;
    bools.z = id.z > 0;

    Cell cell = GetCell(id);


    if(all(int3(0, 0, 0)|| bools))
            newChunkBuffer[GetGridIndex(chunk_id, target_grid_res)] = cell.p[0][0];

    if (all(int3(1, 0, 0) || bools))
        SetChunkBuffer(chunk_id, int3(1, 0, 0), cell);

    if (all(int3(0, 1, 0) || bools))
        SetChunkBuffer(chunk_id, int3(0, 1, 0), cell);

    if (all(int3(0, 0, 1) || bools))
        SetChunkBuffer(chunk_id, int3(0, 0, 1), cell);

    if (all(int3(1, 1, 0) || bools))
        SetChunkBuffer(chunk_id, int3(1, 1, 0), cell);

    if (all(int3(1, 0, 1) || bools))
        SetChunkBuffer(chunk_id, int3(1, 0, 1), cell);

    if (all(int3(0, 1, 1) || bools))
        SetChunkBuffer(chunk_id, int3(0, 1, 1), cell);

    if (all(int3(1, 1, 1) || bools))
        SetChunkBuffer(chunk_id, int3(1, 1, 1), cell);
}

float3 ScalePosition(float3 indices)
{
    // GlobalStart + ChunkStart + Position within Chunk
    return pos_offset + (increments * indices);
}

float freq;
int octaves;
float lacunarity;
float persistance;
float3 offset;
float planet_radius;
float asymptote;
float curvature;
float mod_offset;
float tempMult;
float clampRange;

float IterateNoise(float3 pos)
{
    float value = 0;
    float tempFreq = freq;
    float3 off = float3(offset.x, offset.y, offset.z);

    for (int i = 0; i < octaves; i++)
    {

        // First pass freq is normal and mult is 1
        // 
        value += snoise(((off + pos) * tempFreq)) * tempMult;
        tempFreq *= lacunarity;
        tempMult *= persistance;
    }

    //Radius smoothing function 
    //(Logistic Function: asy is horizontal asymptote, k is curvature, midpoint is where value = asy/2 );
    float asy = asymptote;
    float k = curvature;
    float midpoint = planet_radius;
    float modifier = (asy / (1 + exp(-k * (length(pos) - midpoint)))) - mod_offset;
    
    // plate region is 
    /*if (length(pos) > planet_radius)
        return -1;
    else if (length(pos) < planet_radius * 0.85)
        return 1;*/

        //return pow(-abs(value)+1,2);
    value = clamp(value, -1, 1);
    return clamp(value - modifier, -clampRange, clampRange);
}

[numthreads(8, 8, 8)]
void AddNoise(int3 id : SV_DispatchThreadID)
{
    if ((id.x >= target_grid_res) || (id.y >= target_grid_res) || (id.z >= target_grid_res))
        return;

    int idx = GetGridIndex(id, target_grid_res);
    float3 pos = ScalePosition(id);
    newChunkBuffer[idx] += IterateNoise(pos);
}

